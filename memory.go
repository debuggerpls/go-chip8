package chip8

import "fmt"

type Memory [4096]byte

type ErrOutOfBounds struct {
	what string
}

func (e ErrOutOfBounds) Error() string {
	return fmt.Sprintf("ErrOutOfBounds: %s", e.what)
}

func (m *Memory) Load(address int, data []byte) error {
	if address >= len(m) {
		return ErrOutOfBounds{"address out of bounds"}
	} else if address+len(data) > len(m) {
		return ErrOutOfBounds{"address+data >= memory size"}
	}

	for i, b := range data {
		m[address+i] = b
	}
	return nil
}

func (m *Memory) Init() error {
	var fontData = [][]byte{
		{0xF0, 0x90, 0x90, 0x90, 0xF0},
		{0x20, 0x60, 0x20, 0x20, 0x70},
		{0xF0, 0x10, 0xF0, 0x80, 0xF0},
		{0xF0, 0x10, 0xF0, 0x10, 0xF0},
		{0x90, 0x90, 0xF0, 0x10, 0x10},
		{0xF0, 0x80, 0xF0, 0x10, 0xF0},
		{0xF0, 0x80, 0xF0, 0x90, 0xF0},
		{0xF0, 0x10, 0x20, 0x40, 0x40},
		{0xF0, 0x90, 0xF0, 0x90, 0xF0},
		{0xF0, 0x90, 0xF0, 0x10, 0xF0},
		{0xF0, 0x90, 0xF0, 0x90, 0x90},
		{0xE0, 0x90, 0xE0, 0x90, 0xE0},
		{0xF0, 0x80, 0x80, 0x80, 0xF0},
		{0xE0, 0x90, 0x90, 0x90, 0xE0},
		{0xF0, 0x80, 0xF0, 0x80, 0xF0},
		{0xF0, 0x80, 0xF0, 0x80, 0x80},
	}

	for ifont, font := range fontData {
		m.Load(ifont*len(font), font)
	}

	return nil
}
